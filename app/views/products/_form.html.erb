<%= form_with(model: product, local: true, data: { turbo: false }, html: { multipart: true }) do |form| %>
  

  <% if product.errors.any? %>
    <div class="alert alert-danger">
      <h4><%= pluralize(product.errors.count, "error") %> prohibited this product from being saved:</h4>
      <ul>
        <% product.errors.full_messages.each do |message| %>
          <li><%= message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div class="mb-3">
    <%= form.label :name %>
    <%= form.text_field :name, class: "form-control" %>
  </div>

  <div>
    <%= form.label :slug %>
    <%= form.text_field :slug %>
  </div>

  <div>
    <%= form.label :description_title %>
    <%= form.text_field :description_title %>
  </div>

  <div>
    <%= form.label :description %>
    <%= form.text_area :description %>
  </div>

  <div>
    <%= form.label :price %>
    <%= form.number_field :price, step: 0.01 %>
  </div>

  <div>
    <%= form.label :cost_price %>
    <%= form.number_field :cost_price, step: 0.01 %>
  </div>

  <div>
    <%= form.label :discount_price %>
    <%= form.number_field :discount_price, step: 0.01 %>
  </div>

  <div>
    <%= form.label :sku %>
    <%= form.text_field :sku %>
  </div>

  <div>
    <%= form.label :stock %>
    <%= form.number_field :stock %>
  </div>

  <div>
    <%= form.label :track_inventory %>
    <%= form.check_box :track_inventory %>
  </div>

  <div>
    <%= form.label :stock_status %>
    <%= form.select :stock_status, Product.stock_statuses.keys.map { |k| [k.humanize, k] } %>
  </div>

  <div>
    <%= form.label :sold_individually %>
    <%= form.check_box :sold_individually %>
  </div>

  <div>
    <%= form.label :available_on %>
    <%= form.date_field :available_on %>
  </div>

  <div>
    <%= form.label :discontinue_on %>
    <%= form.date_field :discontinue_on %>
  </div>

  <div>
    <%= form.label :height %>
    <%= form.number_field :height, step: 0.01 %>
  </div>

  <div>
    <%= form.label :width %>
    <%= form.number_field :width, step: 0.01 %>
  </div>

  <div>
    <%= form.label :depth %>
    <%= form.number_field :depth, step: 0.01 %>
  </div>

  <div>
    <%= form.label :weight %>
    <%= form.number_field :weight, step: 0.01 %>
  </div>

  <div>
    <%= form.label :meta_title %>
    <%= form.text_field :meta_title %>
  </div>

  <div>
    <%= form.label :meta_description %>
    <%= form.text_field :meta_description %>
  </div>

  <div>
    <%= form.label :meta_keywords %>
    <%= form.text_field :meta_keywords %>
  </div>

  <div>
    <%= form.label :status %>
    <%= form.select :status, ["active", "inactive"] %>
  </div>

  <div>
    <%= form.label :featured %>
    <%= form.check_box :featured %>
  </div>

<div class="field">
  <%= form.label :requires_login, "Doar utilizatori logați pot cumpăra?" %>
  <%= form.check_box :requires_login %>
</div>

<div class="field">
  <%= form.label :product_type, "Tip produs" %>
  <%= form.select :product_type, Product.product_types.keys.map { |t| [t.titleize, t] } %>
</div>

<div class="field">
  <%= form.label :delivery_method, "Mod de livrare" %>
  <%= form.select :delivery_method, Product.delivery_methods.keys.map { |k| [k.titleize, k] } %>
</div>

<div class="field">
  <%= form.label :visible_to_guests, "Vizibil pentru utilizatori neautentificați" %>
  <%= form.check_box :visible_to_guests %>
</div>


<div class="field">
  <%= form.label :taxable, "Se aplică TVA" %>
  <%= form.check_box :taxable %>
</div>

<div class="field">
  <%= form.label :coupon_applicable, "Se aplică cupon de reducere" %>
  <%= form.check_box :coupon_applicable %>
</div>


<div class="mb-3">
  <%= form.label :attached_files, "Fișiere atașate" %>
  <%= form.file_field :attached_files, multiple: true, direct_upload: true, class: "form-control", id: "attached-files" %>

  <div id="attached-files-badges-wrapper" class="mt-2" style="min-height: 48px; display: flex; flex-wrap: wrap;"></div>
</div>


<% if product.persisted? && product.attached_files.attached? %>
  <div class="mb-3" style="overflow: visible; position: relative;">
    <strong>Fișiere existente:</strong>
    <div style="display: flex; flex-direction: column; gap: 10px;">
      <% product.attached_files.each do |file| %>
        <div style="display: flex; align-items: center; gap: 10px; position: relative;">
          <%= link_to file.filename.to_s, url_for(file), target: "_blank" %>
          <%= link_to "✕", purge_attached_file_product_path(product, file_id: file.id),
                      method: :delete,
                      data: { confirm: "Sigur vrei să ștergi acest fișier?" },
                      class: "btn btn-sm btn-danger mt-1",
                      style: "background-color: #dc3545; color: white; padding: 6px 12px; display: inline-block; border: 1px solid #dc3545; text-decoration: none; font-size: 14px; line-height: 1.5; border-radius: 4px; cursor: pointer; visibility: visible; opacity: 1; position: relative; z-index: 1;" %>
        </div>
      <% end %>
    </div>
  </div>

  

<% end %>




<div class="mb-3">
  <%= form.label :category_ids, "Categorii" %>
  <div id="category-options" class="d-flex flex-wrap gap-2 mb-2">
    <% Category.all.each do |category| %>
      <% selected = product.category_ids.include?(category.id) %>
      <span class="badge category-badge <%= selected ? 'bg-primary' : 'bg-secondary' %> text-white"
            data-id="<%= category.id %>"
            style="cursor: pointer;">
        <%= category.name %>
      </span>
    <% end %>
  </div>

  <div id="category-hidden-inputs">
    <!-- Input ascuns gol pentru a trimite category_ids ca [] -->
    <input type="hidden" name="product[category_ids][]" value="">
    <% product.category_ids.each do |cat_id| %>
      <input type="hidden" name="product[category_ids][]" value="<%= cat_id %>">
    <% end %>
  </div>
</div>





<button type="button" onclick="testPresign()">Testează presign</button>






 <div class="mb-3">
  <%= form.label :custom_attributes, "Atribute personalizate (JSON)", class: "form-label" %>
  <%= form.text_area :custom_attributes, class: "form-control", rows: 5 %>
</div>



 

  <!-- Imagine principală (upload direct BunnyCDN) -->
  <div>
    <label>Imagine principală (direct Bunny)</label><br>
    <%= file_field_tag :main_image_file, id: "bunny-direct-upload" %>
    <%= hidden_field_tag "product[external_image_url]", product.external_image_url, id: "external_image-url" %>
  </div>

  <!-- Imagini secundare (upload direct BunnyCDN) -->
  <div>
    <label>Imagini secundare (direct Bunny)</label><br>
    <%= file_field_tag :secondary_image_files, multiple: true, id: "bunny-secondary-upload" %>
    <div id="bunny-secondary-preview" class="mt-2 d-flex flex-wrap gap-2">
      <% if product.external_image_urls.present? %>
        <% product.external_image_urls.each do |url| %>
          <img src="<%= url %>" width="100" class="img-thumbnail me-2">
          <%= hidden_field_tag "product[external_image_urls][]", url %>
        <% end %>
      <% end %>
    </div>
  </div>

  <div>
    <%= form.submit %>
  </div>
<% end %>

<script>
document.addEventListener("turbo:load", () => {
  const input = document.getElementById("secondary-images");
  const wrapper = document.getElementById("image-badges-wrapper");
  const form = document.querySelector("form");
  const maxSize = 5 * 1024 * 1024; // 5 MB
  const maxFiles = 10; // Maxim 10 imagini secundare

  let allFiles = [];

  input.addEventListener("change", () => {
    const newFiles = Array.from(input.files);

    // Validare dimensiune și număr
    if (allFiles.length + newFiles.length > maxFiles) {
      alert(`Poți încărca maxim ${maxFiles} imagini secundare.`);
      input.value = "";
      return;
    }

    newFiles.forEach(file => {
      if (file.size > maxSize) {
        alert(`Fișierul ${file.name} este prea mare. Dimensiunea maximă este 5MB.`);
      } else if (!allFiles.some(f => f.name === file.name && f.size === file.size)) {
        allFiles.push(file);
      }
    });

    renderBadges();
    input.value = ""; // Resetăm pentru a permite reîncărcarea aceleiași imagini

    // Refacem input.files
    const dt = new DataTransfer();
    allFiles.forEach(file => dt.items.add(file));
    input.files = dt.files;
  });

  function renderBadges() {
    wrapper.innerHTML = "";
    allFiles.forEach((file, index) => {
      const badge = document.createElement("span");
      badge.className = "badge bg-primary text-white me-2 mb-2";
      badge.innerHTML = `${file.name} <span onclick="removeFile(${index})" style="cursor:pointer; margin-left:6px;">×</span>`;
      wrapper.appendChild(badge);
    });
  }

  window.removeFile = function(index) {
    allFiles.splice(index, 1);
    renderBadges();
    const dt = new DataTransfer();
    allFiles.forEach(file => dt.items.add(file));
    input.files = dt.files;
  };
});
</script>

<script>
document.addEventListener("turbo:load", () => {
  const badges = document.querySelectorAll(".category-badge");
  const hiddenInputsWrapper = document.getElementById("category-hidden-inputs");

  badges.forEach(badge => {
    badge.addEventListener("click", () => {
      const id = badge.dataset.id;
      const existingInputs = hiddenInputsWrapper.querySelectorAll(`input[value='${id}']`);

      if (existingInputs.length > 0) {
        existingInputs.forEach(input => input.remove());
        badge.classList.remove("bg-primary");
        badge.classList.add("bg-secondary");
      } else {
        const input = document.createElement("input");
        input.type = "hidden";
        input.name = "product[category_ids][]";
        input.value = id;
        hiddenInputsWrapper.appendChild(input);
        badge.classList.remove("bg-secondary");
        badge.classList.add("bg-primary");
      }
    });
  });
});
</script>

<script>
document.addEventListener("turbo:load", () => {
  const form = document.querySelector("form");

  // === Upload imagine principală ===
  const mainInput = document.getElementById("bunny-direct-upload");
  const mainHiddenInput = document.getElementById("external_image-url");

  if (mainInput && mainHiddenInput) {
    mainInput.addEventListener("change", async (e) => {
      const file = e.target.files[0];
      if (!file) return;

      try {
        const presignRes = await fetch(`/uploads/presign?filename=${encodeURIComponent(file.name)}`);
        const { upload_url, headers } = await presignRes.json();

        console.log("Presign OK (MAIN):", { upload_url, headers });

        const upload = await fetch(upload_url, {
          method: "PUT",
          headers: {
            "Content-Type": headers["Content-Type"]
          },
          body: file
        });

        if (upload.ok) {
          const cdnUrl = upload_url.replace("storage.bunnycdn.com", "ayus-cdn.b-cdn.net").split("?")[0];
          mainHiddenInput.value = cdnUrl;
          alert("Imagine principală încărcată cu succes!");
        } else {
          console.error("Upload failed (main)", await upload.text());
          alert("Eroare la upload imagine principală.");
        }
      } catch (err) {
        console.error("Eroare la comunicare (main)", err);
        alert("Eroare la comunicarea cu serverul.");
      }
    });
  }

  // === Upload imagini secundare ===
  const secondaryInput = document.getElementById("bunny-secondary-upload");
  const preview = document.getElementById("bunny-secondary-preview");

  if (secondaryInput && preview) {
    secondaryInput.addEventListener("change", async () => {
      for (const file of secondaryInput.files) {
        try {
          const presignRes = await fetch(`/uploads/presign?filename=${encodeURIComponent(file.name)}`);
          const { upload_url, headers } = await presignRes.json();

          console.log("Presign OK (SECONDARY):", { upload_url, headers });

          const upload = await fetch(upload_url, {
            method: "PUT",
            headers: {
              "Content-Type": headers["Content-Type"]
            },
            body: file
          });

          if (upload.ok) {
            const cdnUrl = upload_url.replace("storage.bunnycdn.com", "ayus-cdn.b-cdn.net").split("?")[0];

            const img = document.createElement("img");
            img.src = cdnUrl;
            img.width = 100;
            img.classList.add("img-thumbnail", "me-2");
            preview.appendChild(img);

            const hidden = document.createElement("input");
            hidden.type = "hidden";
            hidden.name = "product[external_image_urls][]";
            hidden.value = cdnUrl;
            form.appendChild(hidden);

            alert(`Imaginea ${file.name} a fost încărcată.`);
          } else {
            console.error(`Upload failed (${file.name})`, await upload.text());
            alert(`Eroare la upload pentru ${file.name}`);
          }
        } catch (err) {
          console.error(`Eroare la comunicare pentru ${file.name}`, err);
          alert(`Eroare la comunicare pentru ${file.name}`);
        }
      }
    });
  }
});
</script>






<script>
  function testPresign() {
    fetch("/uploads/presign?filename=test_bunny.png")
      .then(response => response.json())
      .then(data => console.log("Presign OK:", data))
      .catch(error => console.error("Eroare:", error));
  }
</script>
