<%= form_with(model: product, local: true, data: { turbo: false }, html: { multipart: true }) do |form| %>

  <% if product.errors.any? %>
    <div class="alert alert-danger">
      <h4><%= pluralize(product.errors.count, "error") %> prohibited this product from being saved:</h4>
      <ul>
        <% product.errors.full_messages.each do |message| %>
          <li><%= message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div class="mb-3">
    <%= form.label :name %>
    <%= form.text_field :name, class: "form-control" %>
  </div>

  <div>
    <%= form.label :slug %>
    <%= form.text_field :slug %>
  </div>

  <div>
    <%= form.label :description_title %>
    <%= form.text_field :description_title %>
  </div>

  <div>
    <%= form.label :description %>
    <%= form.text_area :description %>
  </div>

  <div>
    <%= form.label :price %>
    <%= form.number_field :price, step: 0.01 %>
  </div>

  <div>
    <%= form.label :cost_price %>
    <%= form.number_field :cost_price, step: 0.01 %>
  </div>

  <div>
    <%= form.label :discount_price %>
    <%= form.number_field :discount_price, step: 0.01 %>
  </div>

  <div>
    <%= form.label :sku %>
    <%= form.text_field :sku %>
  </div>

  <div>
    <%= form.label :stock %>
    <%= form.number_field :stock %>
  </div>

  <div>
    <%= form.label :track_inventory %>
    <%= form.check_box :track_inventory %>
  </div>

  <div>
    <%= form.label :stock_status %>
    <%= form.select :stock_status, Product.stock_statuses.keys.map { |k| [k.humanize, k] } %>
  </div>

  <div>
    <%= form.label :sold_individually %>
    <%= form.check_box :sold_individually %>
  </div>

  <div>
    <%= form.label :available_on %>
    <%= form.date_field :available_on %>
  </div>

  <div>
    <%= form.label :discontinue_on %>
    <%= form.date_field :discontinue_on %>
  </div>

  <div>
    <%= form.label :height %>
    <%= form.number_field :height, step: 0.01 %>
  </div>

  <div>
    <%= form.label :width %>
    <%= form.number_field :width, step: 0.01 %>
  </div>

  <div>
    <%= form.label :depth %>
    <%= form.number_field :depth, step: 0.01 %>
  </div>

  <div>
    <%= form.label :weight %>
    <%= form.number_field :weight, step: 0.01 %>
  </div>

  <div>
    <%= form.label :meta_title %>
    <%= form.text_field :meta_title %>
  </div>

  <div>
    <%= form.label :meta_description %>
    <%= form.text_field :meta_description %>
  </div>

  <div>
    <%= form.label :meta_keywords %>
    <%= form.text_field :meta_keywords %>
  </div>

  <div>
    <%= form.label :status %>
    <%= form.select :status, ["active", "inactive"] %>
  </div>

  <div>
    <%= form.label :featured %>
    <%= form.check_box :featured %>
  </div>

<div class="field">
  <%= form.label :requires_login, "Doar utilizatori logați pot cumpăra?" %>
  <%= form.check_box :requires_login %>
</div>

<div class="field">
  <%= form.label :product_type, "Tip produs" %>
  <%= form.select :product_type, Product.product_types.keys.map { |t| [t.titleize, t] } %>
</div>

<div class="field">
  <%= form.label :delivery_method, "Mod de livrare" %>
  <%= form.select :delivery_method, Product.delivery_methods.keys.map { |k| [k.titleize, k] } %>
</div>

<div class="field">
  <%= form.label :visible_to_guests, "Vizibil pentru utilizatori neautentificați" %>
  <%= form.check_box :visible_to_guests %>
</div>


<div class="field">
  <%= form.label :taxable, "Se aplică TVA" %>
  <%= form.check_box :taxable %>
</div>

<div class="field">
  <%= form.label :coupon_applicable, "Se aplică cupon de reducere" %>
  <%= form.check_box :coupon_applicable %>
</div>


<div class="mb-3">
  <%= form.label :attached_files, "Fișiere atașate" %>
  <%= form.file_field :attached_files, multiple: true, direct_upload: true, class: "form-control", id: "attached-files" %>

  <div id="attached-files-badges-wrapper" class="mt-2" style="min-height: 48px; display: flex; flex-wrap: wrap;"></div>
</div>


<% if product.persisted? && product.attached_files.attached? %>
  <div class="mb-3" style="overflow: visible; position: relative;">
    <strong>Fișiere existente:</strong>
    <div style="display: flex; flex-direction: column; gap: 10px;">
      <% product.attached_files.each do |file| %>
        <div style="display: flex; align-items: center; gap: 10px; position: relative;">
          <%= link_to file.filename.to_s, url_for(file), target: "_blank" %>
          <%= link_to "✕", purge_attached_file_product_path(product, file_id: file.id),
                      method: :delete,
                      data: { confirm: "Sigur vrei să ștergi acest fișier?" },
                      class: "btn btn-sm btn-danger mt-1",
                      style: "background-color: #dc3545; color: white; padding: 6px 12px; display: inline-block; border: 1px solid #dc3545; text-decoration: none; font-size: 14px; line-height: 1.5; border-radius: 4px; cursor: pointer; visibility: visible; opacity: 1; position: relative; z-index: 1;" %>
        </div>
      <% end %>
    </div>
  </div>

  

<% end %>




<div class="mb-3">
  <%= form.label :category_ids, "Categorii" %>
  <div id="category-options" class="d-flex flex-wrap gap-2 mb-2">
    <% Category.all.each do |category| %>
      <% selected = product.category_ids.include?(category.id) %>
      <span class="badge category-badge <%= selected ? 'bg-primary' : 'bg-secondary' %> text-white"
            data-id="<%= category.id %>"
            style="cursor: pointer;">
        <%= category.name %>
      </span>
    <% end %>
  </div>

  <div id="category-hidden-inputs">
    <!-- Input ascuns gol pentru a trimite category_ids ca [] -->
    <input type="hidden" name="product[category_ids][]" value="">
    <% product.category_ids.each do |cat_id| %>
      <input type="hidden" name="product[category_ids][]" value="<%= cat_id %>">
    <% end %>
  </div>
</div>











 <div class="mb-3">
  <%= form.label :custom_attributes, "Atribute personalizate (JSON)", class: "form-label" %>
  <%= form.text_area :custom_attributes, class: "form-control", rows: 5 %>
</div>



<div class="mb-3">
  <%= form.label :main_image, "Imagine principală" %>
  <%= form.file_field :main_image, direct_upload: true, class: "form-control" %>
</div>

<% if product.main_image.attached? %>
  <div class="mb-3">
    <p>Imagine principală curentă:</p>
    <div style="position: relative; display: inline-block;">
      <%= image_tag bunny_cdn_url(product.main_image), class: "img-thumbnail" %>




      <%= link_to "✕", purge_main_image_product_path(product),
                  method: :delete,
                  data: { turbo: false, confirm: "Ești sigur că vrei să ștergi imaginea principală?" },
                  class: "btn btn-sm btn-danger",
                  style: "position: absolute; top: 4px; right: 4px; padding: 2px 6px; font-size: 12px;" %>
    </div>
  </div>
<% end %>




<div class="mb-3">
  <%= form.label :secondary_images, "Imagini secundare" %>
  <%= form.file_field :secondary_images, multiple: true, direct_upload: true, class: "form-control", id: "secondary-images" %>

  <div id="image-badges-wrapper" class="mt-2" style="min-height: 48px; display: flex; flex-wrap: wrap;"></div>
</div>

<% if product.secondary_images_attachments.any? %>
  <div class="secondary-image-previews" style="display: flex; flex-wrap: wrap; gap: 12px; margin-top: 10px;">
    <% product.secondary_images_attachments.each do |attachment| %>
      <div style="position: relative; display: inline-block;">
        <%= image_tag cdn_image_url(attachment),
                      alt: "Imagine",
                      loading: "lazy",
                      class: "img-thumbnail" %>

        <%= link_to "✕", purge_image_product_path(product, image_id: attachment.id),
                    method: :delete,
                    data: { turbo: false, confirm: "Ștergi această imagine?" },
                    class: "btn btn-sm btn-danger",
                    style: "position: absolute; top: 4px; right: 4px; padding: 2px 6px; font-size: 12px;" %>
      </div>
    <% end %>
  </div>
<% end %>







<div>
  <%= form.submit %>
</div>

<% end %>

<script>
document.addEventListener("turbo:load", () => {
  const input = document.getElementById("secondary-images");
  const wrapper = document.getElementById("image-badges-wrapper");
  const form = document.querySelector("form");

  let allFiles = [];

  input.addEventListener("change", () => {
    const newFiles = Array.from(input.files);

    newFiles.forEach(file => {
      if (!allFiles.some(f => f.name === file.name && f.size === file.size)) {
        allFiles.push(file);
      }
    });

    renderBadges();
    input.value = ""; // trebuie resetat pentru a permite aceeași imagine din nou

    // La fiecare adăugare, refacem `input.files`
    const dt = new DataTransfer();
    allFiles.forEach(file => dt.items.add(file));
    input.files = dt.files;
  });

  function renderBadges() {
    wrapper.innerHTML = "";
    allFiles.forEach((file, index) => {
      const badge = document.createElement("span");
      badge.className = "badge bg-primary text-white me-2 mb-2";
      badge.innerHTML = `${file.name} <span onclick="removeFile(${index})" style="cursor:pointer; margin-left:6px;">&times;</span>`;
      wrapper.appendChild(badge);
    });
  }

  window.removeFile = function(index) {
    allFiles.splice(index, 1);
    renderBadges();
    const dt = new DataTransfer();
    allFiles.forEach(file => dt.items.add(file));
    input.files = dt.files;
  };
});
</script>



<script>
document.addEventListener("turbo:load", () => {
  const badges = document.querySelectorAll(".category-badge");
  const hiddenInputsWrapper = document.getElementById("category-hidden-inputs");

  badges.forEach(badge => {
    badge.addEventListener("click", () => {
      const id = badge.dataset.id;
      const existingInputs = hiddenInputsWrapper.querySelectorAll(`input[value='${id}']`);
      console.log(`Badge clicked: ID=${id}, Existing inputs: ${existingInputs.length}`);

      if (existingInputs.length > 0) {
        existingInputs.forEach(input => {
          console.log(`Removing input with value: ${input.value}`);
          input.remove();
        });
        badge.classList.remove("bg-primary");
        badge.classList.add("bg-secondary");
      } else {
        const input = document.createElement("input");
        input.type = "hidden";
        input.name = "product[category_ids][]";
        input.value = id;
        hiddenInputsWrapper.appendChild(input);
        console.log(`Added input with value: ${id}`);

        badge.classList.remove("bg-secondary");
        badge.classList.add("bg-primary");
      }

      // Log starea finală
      const allInputs = hiddenInputsWrapper.querySelectorAll("input");
      console.log("Current category inputs:", Array.from(allInputs).map(input => input.value));
    });
  });
});
</script>

<script>
document.addEventListener("turbo:load", () => {
  const input = document.getElementById("attached-files");
  const wrapper = document.getElementById("attached-files-badges-wrapper");
  const form = document.querySelector("form");

  let allFiles = [];

  input.addEventListener("change", () => {
    const newFiles = Array.from(input.files);
    newFiles.forEach(file => {
      if (!allFiles.some(f => f.name === file.name && f.size === file.size)) {
        allFiles.push(file);
      }
    });

    renderBadges();
    input.value = ""; // resetăm inputul real

    const dt = new DataTransfer();
    allFiles.forEach(file => dt.items.add(file));
    input.files = dt.files;
  });

  function renderBadges() {
    wrapper.innerHTML = "";
    allFiles.forEach((file, index) => {
      const badge = document.createElement("span");
      badge.className = "badge bg-primary text-white me-2 mb-2";
      badge.innerHTML = `${file.name} <span onclick="removeAttachedFile(${index})" style="cursor:pointer; margin-left:6px;">&times;</span>`;
      wrapper.appendChild(badge);
    });
  }

  window.removeAttachedFile = function(index) {
    allFiles.splice(index, 1);
    renderBadges();
    const dt = new DataTransfer();
    allFiles.forEach(file => dt.items.add(file));
    input.files = dt.files;
  };
});
</script>
